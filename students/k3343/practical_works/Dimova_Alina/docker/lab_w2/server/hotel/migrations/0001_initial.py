# Generated by Django 3.0.4 on 2020-07-02 13:53

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Checkin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_in', models.DateField(verbose_name='Дата заселения')),
                ('date_out', models.DateField(verbose_name='Дата выезда')),
            ],
            options={
                'verbose_name': 'Заселение',
                'verbose_name_plural': 'Заселения',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passport', models.CharField(max_length=20, verbose_name='Номер паспорта')),
                ('full_name', models.CharField(max_length=50, verbose_name='ФИО')),
                ('city', models.CharField(max_length=20, verbose_name='Из города')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor_num', models.IntegerField(verbose_name='Номер этажа')),
            ],
            options={
                'verbose_name': 'Этаж',
                'verbose_name_plural': 'Этажи',
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=50, verbose_name='ФИО')),
            ],
            options={
                'verbose_name': 'Работник',
                'verbose_name_plural': 'Работники',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.IntegerField(verbose_name='Номер комнаты')),
                ('phone', models.IntegerField(verbose_name='Телефон')),
                ('price', models.IntegerField(verbose_name='Стоимость за сутки')),
                ('type', models.CharField(choices=[('1-комн', 'Однокомнатный'), ('2-комн', 'Двухкомнатный'), ('3-комн', 'Трехкомнатный')], max_length=20)),
                ('client', models.ManyToManyField(through='hotel.Checkin', to='hotel.Client')),
                ('floor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='hotel.Floor', verbose_name='Этаж')),
            ],
            options={
                'verbose_name': 'Номер',
                'verbose_name_plural': 'Номера',
            },
        ),
        migrations.CreateModel(
            name='Otchet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата уборки')),
                ('day_of_week', models.CharField(choices=[('Пон', 'Понедельник'), ('Вт', 'Вторник'), ('Ср', 'Среда'), ('Чт', 'Четверг'), ('Пт', 'Пятница'), ('Сб', 'Суббота'), ('Вс', 'Воскресенье')], max_length=20)),
                ('status', models.CharField(choices=[('Ок', 'Проведена'), ('Нет', 'Есть проблемы')], max_length=20, verbose_name='Статус')),
                ('text', models.CharField(max_length=500, verbose_name='Комментарий')),
                ('floor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel.Floor', verbose_name='Этаж')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel.Worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='Cleaning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Пон', 'Понедельник'), ('Вт', 'Вторник'), ('Ср', 'Среда'), ('Чт', 'Четверг'), ('Пт', 'Пятница'), ('Сб', 'Суббота'), ('Вс', 'Воскресенье')], max_length=20)),
                ('floor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel.Floor', verbose_name='Этаж')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel.Worker', verbose_name='Работник')),
            ],
            options={
                'verbose_name': 'Уборка',
                'verbose_name_plural': 'Уборки',
            },
        ),
        migrations.AddField(
            model_name='checkin',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkins', to='hotel.Client', verbose_name='Клиент'),
        ),
        migrations.AddField(
            model_name='checkin',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkins', to='hotel.Room', verbose_name='Номер комнаты'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=50, verbose_name='ФИО')),
                ('is_worker', models.BooleanField(verbose_name='ФИО')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
